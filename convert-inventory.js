const fs = require('fs');
const path = require('path');

console.log('\n🔄 Converting your inventory data...\n');

// Read the inventory template
let inventoryData;
try {
    const rawData = fs.readFileSync('inventory-template.json', 'utf8');
    inventoryData = JSON.parse(rawData);
} catch (error) {
    console.error('❌ Error reading inventory-template.json');
    console.error('Make sure the file exists and is valid JSON.');
    process.exit(1);
}

// Validate and convert items
const items = inventoryData.items.filter(item => {
    // Skip template/example items
    if (item.name.includes('[YOUR ITEM NAME HERE]')) {
        return false;
    }
    return true;
});

if (items.length === 0) {
    console.error('❌ No valid items found!');
    console.error('Please fill in inventory-template.json with your real items.');
    process.exit(1);
}

console.log(`✅ Found ${items.length} items to convert\n`);

// Convert to dashboard format
const dashboardItems = items.map(item => {
    return {
        id: item.id,
        buildingId: item.buildingId,
        name: item.name,
        status: item.status,
        value: item.value,
        condition: item.condition,
        imageUrl: '/placeholder-equipment.jpg', // Will update with real photos later
        description: item.description,
        specifications: item.specifications,
        location: item.location,
        serialNumber: item.serialNumber,
        notes: item.notes
    };
});

// Calculate totals for summary
const totalValue = dashboardItems.reduce((sum, item) => sum + item.value, 0);
const building1Count = dashboardItems.filter(i => i.buildingId === 'building-1').length;
const building2Count = dashboardItems.filter(i => i.buildingId === 'building-2').length;
const building3Count = dashboardItems.filter(i => i.buildingId === 'building-3').length;

// Generate TypeScript constants file
const tsContent = `// AUTO-GENERATED FROM inventory-template.json
// Last updated: ${new Date().toISOString()}
// DO NOT EDIT THIS FILE MANUALLY - Edit inventory-template.json instead

import { Building, InventoryItem } from './types';

export const BUILDINGS_DATA: Building[] = [
    {
        id: 'building-1',
        name: 'Building 1 - Silver',
        status: 'In Progress',
        path: 'M 150,50 L 150,200 L 350,200 L 350,50 Z',
    },
    {
        id: 'building-2',
        name: 'Building 2 - Green',
        status: 'In Progress',
        path: 'M 400,80 L 400,180 L 550,180 L 550,80 Z',
    },
    {
        id: 'building-3',
        name: 'Building 3 - Red',
        status: 'Pending',
        path: 'M 200,230 L 200,350 L 500,350 L 500,230 Z',
    },
];

export const INVENTORY_DATA: InventoryItem[] = ${JSON.stringify(dashboardItems, null, 4)};

// Statistics (for reference)
export const INVENTORY_STATS = {
    totalItems: ${dashboardItems.length},
    totalValue: ${totalValue},
    building1Items: ${building1Count},
    building2Items: ${building2Count},
    building3Items: ${building3Count},
    lastUpdated: '${new Date().toLocaleString()}'
};
`;

// Write to constants.ts
const constantsPath = path.join('app', 'constants.ts');
try {
    fs.writeFileSync(constantsPath, tsContent);
    console.log('✅ Successfully updated app/constants.ts\n');
} catch (error) {
    console.error('❌ Error writing to app/constants.ts');
    console.error(error.message);
    process.exit(1);
}

// Print summary
console.log('📊 Inventory Summary:\n');
console.log(`   Total Items: ${dashboardItems.length}`);
console.log(`   Total Value: $${totalValue.toLocaleString()}`);
console.log(`   Building 1 (Silver): ${building1Count} items`);
console.log(`   Building 2 (Green): ${building2Count} items`);
console.log(`   Building 3 (Red): ${building3Count} items`);
console.log('\n✅ Ready to test! Run: cd app && npm run dev\n');

// Create a human-readable summary
const summaryContent = `# Inventory Data Summary

**Generated:** ${new Date().toLocaleString()}
**Total Items:** ${dashboardItems.length}
**Total Value:** $${totalValue.toLocaleString()}

## Items by Building

**Building 1 (Silver):** ${building1Count} items
${dashboardItems.filter(i => i.buildingId === 'building-1').map(i => `- ${i.name}: $${i.value.toLocaleString()}`).join('\n')}

**Building 2 (Green):** ${building2Count} items
${dashboardItems.filter(i => i.buildingId === 'building-2').map(i => `- ${i.name}: $${i.value.toLocaleString()}`).join('\n')}

**Building 3 (Red):** ${building3Count} items
${dashboardItems.filter(i => i.buildingId === 'building-3').map(i => `- ${i.name}: $${i.value.toLocaleString()}`).join('\n')}

## All Items

${dashboardItems.map((item, i) => `
### ${i + 1}. ${item.name}
- **Location:** ${item.location}
- **Condition:** ${item.condition}
- **Value:** $${item.value.toLocaleString()}
- **Description:** ${item.description}
${item.notes ? `- **Notes:** ${item.notes}` : ''}
`).join('\n')}
`;

fs.writeFileSync('inventory-summary.md', summaryContent);
console.log('📄 Created inventory-summary.md for your reference\n');

console.log('🎉 All done! Next steps:\n');
console.log('1. cd app');
console.log('2. npm run dev');
console.log('3. Open http://localhost:5173');
console.log('4. Record your demo video!');
console.log('\n');
